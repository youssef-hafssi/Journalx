import React, { createContext, useContext, useEffect, useState } from 'react';
import { supabase, handleSupabaseError, isSupabaseConfigured } from '@/lib/supabase';
import type { User as SupabaseUser } from '@supabase/supabase-js';
import { toast } from 'sonner';

interface User {
  id: string;
  email: string;
  name: string;
  avatarUrl?: string;
  createdAt: string;
}

interface AuthContextType {
  user: User | null;
  isAuthenticated: boolean;
  isLoading: boolean;
  login: (email: string, password: string) => Promise<boolean>;
  signup: (email: string, password: string, name: string) => Promise<boolean>;
  logout: () => Promise<void>;
  updateProfile: (updates: { name?: string; avatarUrl?: string }) => Promise<boolean>;
  resetPassword: (email: string) => Promise<boolean>;
}

const AuthContext = createContext<AuthContextType | undefined>(undefined);

export function AuthProvider({ children }: { children: React.ReactNode }) {
  const [user, setUser] = useState<User | null>(null);
  const [isLoading, setIsLoading] = useState(true);
  // Check for existing authentication on app load
  useEffect(() => {
    const checkAuth = () => {
      try {
        const savedUser = localStorage.getItem('journalx_user');
        const authToken = localStorage.getItem('journalx_auth_token');
        
        if (savedUser && authToken) {
          const parsedUser = JSON.parse(savedUser);
          // Validate token is still valid (simple check)
          if (authToken.startsWith('token-') || authToken === 'demo-token') {
            setUser(parsedUser);
          } else {
            // Invalid token, clear auth data
            localStorage.removeItem('journalx_user');
            localStorage.removeItem('journalx_auth_token');
          }
        }
      } catch (error) {
        console.error('Error checking authentication:', error);
        // Clear invalid data
        localStorage.removeItem('journalx_user');
        localStorage.removeItem('journalx_auth_token');
      } finally {
        setIsLoading(false);
      }
    };

    checkAuth();
  }, []);

  const login = async (email: string, password: string): Promise<boolean> => {
    try {
      setIsLoading(true);
      
      // Simulate API call - In a real app, this would be an actual API request
      await new Promise(resolve => setTimeout(resolve, 1000));
      
      // Check against stored users or use demo credentials
      const demoCredentials = { email: 'demo@journalx.com', password: 'demo123' };
      const storedUsers = JSON.parse(localStorage.getItem('journalx_registered_users') || '[]');
      
      // Check demo credentials first
      if (email === demoCredentials.email && password === demoCredentials.password) {
        const demoUser: User = {
          id: 'demo-user',
          email: 'demo@journalx.com',
          name: 'Demo User',
          createdAt: new Date().toISOString(),
        };
        
        setUser(demoUser);
        localStorage.setItem('journalx_user', JSON.stringify(demoUser));
        localStorage.setItem('journalx_auth_token', 'demo-token');
        return true;
      }
      
      // Check registered users
      const foundUser = storedUsers.find((u: any) => u.email === email && u.password === password);
      if (foundUser) {
        const { password: _, ...userWithoutPassword } = foundUser;
        setUser(userWithoutPassword);
        localStorage.setItem('journalx_user', JSON.stringify(userWithoutPassword));
        localStorage.setItem('journalx_auth_token', `token-${foundUser.id}`);
        return true;
      }
      
      return false;
    } catch (error) {
      console.error('Login error:', error);
      return false;
    } finally {
      setIsLoading(false);
    }
  };

  const signup = async (email: string, password: string, name: string): Promise<boolean> => {
    try {
      setIsLoading(true);
      
      // Simulate API call
      await new Promise(resolve => setTimeout(resolve, 1500));
      
      // Check if user already exists
      const storedUsers = JSON.parse(localStorage.getItem('journalx_registered_users') || '[]');
      const existingUser = storedUsers.find((u: any) => u.email === email);
      
      if (existingUser) {
        return false; // User already exists
      }
      
      // Create new user
      const newUser: User & { password: string } = {
        id: `user-${Date.now()}`,
        email,
        name,
        password,
        createdAt: new Date().toISOString(),
      };
      
      // Save to registered users
      storedUsers.push(newUser);
      localStorage.setItem('journalx_registered_users', JSON.stringify(storedUsers));
      
      // Auto-login the new user
      const { password: _, ...userWithoutPassword } = newUser;
      setUser(userWithoutPassword);
      localStorage.setItem('journalx_user', JSON.stringify(userWithoutPassword));
      localStorage.setItem('journalx_auth_token', `token-${newUser.id}`);
      
      return true;
    } catch (error) {
      console.error('Signup error:', error);
      return false;
    } finally {
      setIsLoading(false);
    }
  };
  const logout = () => {
    setUser(null);
    // Clear auth data
    localStorage.removeItem('journalx_user');
    localStorage.removeItem('journalx_auth_token');
    
    // Optionally clear user-specific app data
    // You might want to keep journal entries and trades for the user
    // or clear them depending on your app's privacy policy
    console.log('User logged out successfully');
  };

  const value = {
    user,
    isAuthenticated: !!user,
    isLoading,
    login,
    signup,
    logout,
  };

  return (
    <AuthContext.Provider value={value}>
      {children}
    </AuthContext.Provider>
  );
}

export function useAuth() {
  const context = useContext(AuthContext);
  if (context === undefined) {
    throw new Error('useAuth must be used within an AuthProvider');
  }
  return context;
}
